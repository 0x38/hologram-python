#!/usr/bin/env python

# hologram_send.py - Hologram Python SDK command line interface (CLI) for sending messages to the cloud
#
# Author: Hologram <support@hologram.io>
#
# Copyright 2016 - Hologram (Konekt, Inc.)
#
#
# LICENSE: Distributed under the terms of the MIT License

import argparse
import hjson
import logging
import sys

import Hologram
from Hologram.CustomCloud import CustomCloud
from Hologram.HologramCloud import HologramCloud

script_description = '''
This hologram_send program sends a message (string) to a given host and port.
'''

def parseArguments():

    parser = argparse.ArgumentParser(description=script_description)

    parser.add_argument("message", nargs = '?',
                        help = 'message that will be sent to the cloud')
    parser.add_argument('--devicekey', nargs = '?',
                        help = 'Hologram device key (8 characters long)')
    parser.add_argument('--iccid', nargs = '?',
                        help = 'Hologram device id')
    parser.add_argument('--imsi', nargs = '?',
                        help = 'Hologram private key')
    parser.add_argument('--authtype', default = 'csrpsk', nargs = '?',
                        help = 'The authentication type used if HologramCloud is in use')
    parser.add_argument('--timeout', type = int, default = 5, nargs = '?',
                        help = 'The period in seconds before the socket closes \
                                if it doesn\'t receive a response')
    parser.add_argument('--host', required=False, help = argparse.SUPPRESS)
    parser.add_argument('-p', '--port', type = int, required=False,
                        help=argparse.SUPPRESS)
    parser.add_argument('-t', '--topic', nargs = '*',
                        help = 'Topics for the message (optional)')
    parser.add_argument('-f', '--file', nargs = '?',
                        help = 'Configuration (HJSON) file that stores the required \
                                credentials to send the message to the cloud')
    parser.add_argument('-v', '--verbose', action = 'store_true', required = False)

    return parser.parse_args()

def sendTOTP(args, data):

    if not args.iccid and ('device_id' in data):
        args.iccid = data['device_id']

    if not args.imsi and ('private_key' in data):
        args.imsi = data['private_key']

    credentials = {'device_id': args.iccid, 'private_key': args.imsi}
    hologram = HologramCloud(credentials, enable_inbound=False,
                             authentication_type=args.authtype,
                             network='cellular')

    modem = ''
    # Load the ICCID and IMSI values if modem is physically attached to machine
    if hologram.network.modem.isModemAttached():
        modem = hologram.network.modem.active_modem_interface
        hologram.credentials = {'device_id': hologram.network.iccid,
                                'private_key': hologram.network.imsi}
        hologram.initializeNetwork('cellular-' + str(modem))

    if (hologram.credentials['device_id'] is None) or (hologram.credentials['private_key'] is None):
        raise Exception('Device id or private key not specified')

    result = hologram.network.connect()
    if result == False:
        raise Exception('Failed to connect to cell network')

    recv = hologram.sendMessage(args.message, topics = args.topic, timeout = args.timeout)
    print "RESPONSE CODE FROM CLOUD: " + str(recv)
    print "RESPONSE MESSAGE: " + hologram.getResultString(recv)

    hologram.network.disconnect()

def sendPSK(args, data):

    if not (args.devicekey) and ('devicekey' in data):
        args.devicekey = data['devicekey']

    if not args.devicekey:
        raise Exception('Device key not specified')

    credentials = {'devicekey': args.devicekey}

    recv = ''
    if args.host or args.port:
        # we're using some custom cloud
        customCloud = CustomCloud(None,
                                  send_host=args.host,
                                  send_port=args.port)
        recv = customCloud.sendMessage(args.message, timeout=args.timeout)
        print "RESPONSE FROM CLOUD: " + str(recv)
    else:
        # host and port are default so use Hologram
        hologram = HologramCloud(credentials, authentication_type=args.authtype)
        recv = hologram.sendMessage(args.message, topics=args.topic, timeout=args.timeout)
        print "RESPONSE CODE FROM CLOUD: " + str(recv)
        print "RESPONSE MESSAGE: " + hologram.getResultString(recv)

def main():

    args = parseArguments()

    data = dict()
    if args.file:
        with open(args.file) as credentials_file:
            data = hjson.load(credentials_file)

    # logging
    loglevel = logging.WARNING
    if args.verbose:
        loglevel = logging.DEBUG

    logging.basicConfig(level=loglevel)

    if args.authtype == 'totp':
        sendTOTP(args, data)
    else:
        sendPSK(args, data)
if __name__ == "__main__": main()
